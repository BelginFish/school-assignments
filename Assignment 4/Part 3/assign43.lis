                        .module assign43.c
                        .area text
 0000                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART3~1\assign43.c
 0000                   .dbfunc e main _main fI
 0000           ; shifted_instruction -> -4,x
 0000           ;    instruction -> -2,x
 0000           _main::
 0000 34                pshx
 0001 B775              tfr s,x
 0003 1B9C              leas -4,sp
 0005                   .dbline -1
 0005                   .dbline 17
 0005           ; #include <hcs12dp256.h>
 0005           ; #include <stdio.h>
 0005           ; 
 0005           ; #define       STEPPER_DELAY   0XF000
 0005           ; #define STEPPER_CW            0
 0005           ; #define STEPPER_CCW           1
 0005           ; #define STEPPER_STEPS_PER_TURN        5*4
 0005           ; 
 0005           ; void stepper_init(void);
 0005           ; void stepper_turn(int quater_turns, int direction);
 0005           ; void stepper_turn_cw(int quarter_turns);
 0005           ; //void stepper_turn_ccw(int quarter_turns);
 0005           ; void  stepper_set_step(int step);
 0005           ; void stepper_delay(unsigned int delay);
 0005           ; 
 0005           ; int main()
 0005           ; {
 0005                   .dbline 18
 0005           ;       int instruction = 0;
 0005 CC0000            ldd #0
 0008 6C1E              std -2,x
 000A                   .dbline 19
 000A           ;       int shifted_instruction = 0;
 000A CC0000            ldd #0
 000D 6C1C              std -4,x
 000F                   .dbline 21
 000F           ;       
 000F           ;       setbaud(BAUD19K);       
 000F CC001A            ldd #26
 0012 160000            jsr _setbaud
 0015                   .dbline 22
 0015           ;       stepper_init();
 0015 1600CD            jsr _stepper_init
 0018                   .dbline 23
 0018           ;       stepper_turn_cw(STEPPER_STEPS_PER_TURN * 2);
 0018 CC0028            ldd #40
 001B 16002B            jsr _stepper_turn_cw
 001E                   .dbline 24
 001E           ;       stepper_turn_ccw(STEPPER_STEPS_PER_TURN * 2);
 001E CC0028            ldd #40
 0021 160059            jsr _stepper_turn_ccw
 0024                   .dbline 25
 0024           ;       return 1;
 0024 CC0001            ldd #1
 0027                   .dbline -2
 0027           L3:
 0027 B757              tfr x,s
 0029 30                pulx
 002A                   .dbline 0 ; func end
 002A 3D                rts
 002B                   .dbsym l shifted_instruction -4 I
 002B                   .dbsym l instruction -2 I
 002B                   .dbend
 002B                   .dbfunc e stepper_turn_cw _stepper_turn_cw fV
 002B           ;          steps -> 2,x
 002B           _stepper_turn_cw::
 002B 3B                pshd
 002C 34                pshx
 002D B775              tfr s,x
 002F 1B9E              leas -2,sp
 0031                   .dbline -1
 0031                   .dbline 32
 0031           ; }
 0031           ; 
 0031           ; /*
 0031           ;       Turn clock-wise a given number of steps
 0031           ; */
 0031           ; void stepper_turn_cw(int steps)
 0031           ; {
 0031                   .dbline 33
 0031 201C              bra L8
 0033           L5:
 0033                   .dbline 33
 0033                   .dbline 34
 0033 EC02              ldd 2,x
 0035 CD0004            ldy #4
 0038 B7D6              exg x,y
 003A 1815              idivs
 003C B7D6              exg x,y
 003E 6C1E              std -2,x
 0040 CC0003            ldd #3
 0043 A31E              subd -2,x
 0045 16007E            jsr _stepper_set_step
 0048                   .dbline 35
 0048           L6:
 0048                   .dbline 33
 0048 EC02              ldd 2,x
 004A 830001            subd #1
 004D 6C02              std 2,x
 004F           L8:
 004F                   .dbline 33
 004F           ;       for ( ; steps > 0; steps-- ) {
 004F EC02              ldd 2,x
 0051 2EE0              bgt L5
 0053                   .dbline -2
 0053                   .dbline 36
 0053           ;               stepper_set_step(3 - (steps % 4));
 0053           ;       }
 0053           ; }
 0053           L4:
 0053 B757              tfr x,s
 0055 30                pulx
 0056 1B82              leas 2,sp
 0058                   .dbline 0 ; func end
 0058 3D                rts
 0059                   .dbsym l steps 2 I
 0059                   .dbend
 0059                   .dbfunc e stepper_turn_ccw _stepper_turn_ccw fV
 0059           ;          steps -> 2,x
 0059           _stepper_turn_ccw::
 0059 3B                pshd
 005A 34                pshx
 005B B775              tfr s,x
 005D                   .dbline -1
 005D                   .dbline 42
 005D           ; 
 005D           ; /*
 005D           ;       Turn clock-wise a given number of steps
 005D           ; */
 005D           ; void stepper_turn_ccw(int steps)
 005D           ; {
 005D                   .dbline 43
 005D 2015              bra L13
 005F           L10:
 005F                   .dbline 43
 005F                   .dbline 44
 005F EC02              ldd 2,x
 0061 CD0004            ldy #4
 0064 B7D6              exg x,y
 0066 1815              idivs
 0068 B7D6              exg x,y
 006A 16007E            jsr _stepper_set_step
 006D                   .dbline 45
 006D           L11:
 006D                   .dbline 43
 006D EC02              ldd 2,x
 006F 830001            subd #1
 0072 6C02              std 2,x
 0074           L13:
 0074                   .dbline 43
 0074           ;       for ( ; steps > 0; steps-- ) {
 0074 EC02              ldd 2,x
 0076 2EE7              bgt L10
 0078                   .dbline -2
 0078                   .dbline 46
 0078           ;               stepper_set_step(steps % 4);
 0078           ;       }
 0078           ; }
 0078           L9:
 0078 B757              tfr x,s
 007A 30                pulx
 007B 1B82              leas 2,sp
 007D                   .dbline 0 ; func end
 007D 3D                rts
 007E                   .dbsym l steps 2 I
 007E                   .dbend
 007E                   .dbfunc e stepper_set_step _stepper_set_step fV
 007E           ;     coded_step -> -2,x
 007E           ;           step -> 2,x
 007E           _stepper_set_step::
 007E 3B                pshd
 007F 34                pshx
 0080 B775              tfr s,x
 0082 1B9C              leas -4,sp
 0084                   .dbline -1
 0084                   .dbline 52
 0084           ; 
 0084           ; /*
 0084           ; 
 0084           ; */
 0084           ; void stepper_set_step(int step)
 0084           ; {
 0084                   .dbline 53
 0084           ;       int coded_step = 0;
 0084 CC0000            ldd #0
 0087 6C1E              std -2,x
 0089                   .dbline 56
 0089           ;       
 0089           ;       // Get the coded step value for this step
 0089           ;       if ( step == 2 ) {
 0089 EC02              ldd 2,x
 008B 8C0002            cpd #2
 008E 2607              bne L15
 0090                   .dbline 56
 0090                   .dbline 57
 0090           ;               coded_step = 3;
 0090 CC0003            ldd #3
 0093 6C1E              std -2,x
 0095                   .dbline 58
 0095 2012              bra L16
 0097           L15:
 0097                   .dbline 58
 0097           ;       } else if ( step == 3 ) {
 0097 EC02              ldd 2,x
 0099 8C0003            cpd #3
 009C 2607              bne L17
 009E                   .dbline 58
 009E                   .dbline 59
 009E           ;               coded_step = 2;
 009E CC0002            ldd #2
 00A1 6C1E              std -2,x
 00A3                   .dbline 60
 00A3 2004              bra L18
 00A5           L17:
 00A5                   .dbline 60
 00A5           ;       } else {
 00A5                   .dbline 61
 00A5           ;               coded_step = step;
 00A5 1802021E          movw 2,x,-2,x
 00A9                   .dbline 62
 00A9           ;       }
 00A9           L18:
 00A9           L16:
 00A9                   .dbline 65
 00A9           ; 
 00A9           ;       // Set the bits in port T
 00A9           ;       PTT = (PTT & ~0x60) | (coded_step << 5);
 00A9 EC1E              ldd -2,x
 00AB 59                lsld
 00AC 59                lsld
 00AD 59                lsld
 00AE 59                lsld
 00AF 59                lsld
 00B0 6C1C              std -4,x
 00B2                   ; vol
 00B2 F60240            ldab 0x240
 00B5 87                clra
 00B6 84FF              anda #255
 00B8 C49F              andb #159
 00BA AA1C              ora -4,x
 00BC EA1D              orb -3,x
 00BE 7B0240            stab 0x240
 00C1                   .dbline 70
 00C1           ;       
 00C1           ;       //printf("Instruction: %X\nShifted Instruction: %X\nPTT: %X\n\n", instruction, shifted_instruction, PTT);
 00C1           ;       
 00C1           ;       // Delay to allow enough time for the step to take place
 00C1           ;       stepper_delay(STEPPER_DELAY);
 00C1 CCF000            ldd #0xf000
 00C4 1600DA            jsr _stepper_delay
 00C7                   .dbline -2
 00C7                   .dbline 71
 00C7           ; } 
 00C7           L14:
 00C7 B757              tfr x,s
 00C9 30                pulx
 00CA 1B82              leas 2,sp
 00CC                   .dbline 0 ; func end
 00CC 3D                rts
 00CD                   .dbsym l coded_step -2 I
 00CD                   .dbsym l step 2 I
 00CD                   .dbend
 00CD                   .dbfunc e stepper_init _stepper_init fV
 00CD           _stepper_init::
 00CD                   .dbline -1
 00CD                   .dbline 77
 00CD           ; 
 00CD           ; /*
 00CD           ;       Initialize ports for the stepper motor
 00CD           ; */
 00CD           ; void stepper_init()
 00CD           ; {
 00CD                   .dbline 78
 00CD           ;       DDRP = DDRP | 0x20; // Enable output for the enable bit
 00CD 1C025A20          bset 0x25a,#32
 00D1                   .dbline 79
 00D1           ;       DDRT = DDRT | 0x60; // Enable output to the stepper motor
 00D1 1C024260          bset 0x242,#96
 00D5                   .dbline 80
 00D5           ;       PTP  = PTP  | 0x20; // Enable the stepper motor
 00D5 1C025820          bset 0x258,#32
 00D9                   .dbline -2
 00D9                   .dbline 81
 00D9           ; }
 00D9           L19:
 00D9                   .dbline 0 ; func end
 00D9 3D                rts
 00DA                   .dbend
 00DA                   .dbfunc e stepper_delay _stepper_delay fV
 00DA           ;          delay -> 2,x
 00DA           _stepper_delay::
 00DA 3B                pshd
 00DB 34                pshx
 00DC B775              tfr s,x
 00DE                   .dbline -1
 00DE                   .dbline 87
 00DE           ; 
 00DE           ; /*
 00DE           ;       Add delays for the stepper, based on given parameter
 00DE           ; */
 00DE           ; void stepper_delay(unsigned int delay)
 00DE           ; {
 00DE                   .dbline 88
 00DE 2007              bra L24
 00E0           L21:
 00E0                   .dbline 88
 00E0                   .dbline 88
 00E0           L22:
 00E0                   .dbline 88
 00E0 EC02              ldd 2,x
 00E2 830001            subd #1
 00E5 6C02              std 2,x
 00E7           L24:
 00E7                   .dbline 88
 00E7           ;       for ( ; delay > 0 ; delay-- ) {}
 00E7 EC02              ldd 2,x
 00E9 26F5              bne L21
 00EB                   .dbline -2
 00EB                   .dbline 89
 00EB           ; }
 00EB           L20:
 00EB B757              tfr x,s
 00ED 30                pulx
 00EE 1B82              leas 2,sp
 00F0                   .dbline 0 ; func end
 00F0 3D                rts
 00F1                   .dbsym l delay 2 i
 00F1                   .dbend
