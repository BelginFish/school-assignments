                        .module assign44.c
                        .area text
 0000                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1/../lib/stepper.c
 0000                   .dbfunc e stepper_turn_cw _stepper_turn_cw fV
 0000           ;          steps -> 2,x
 0000           _stepper_turn_cw::
 0000 3B                pshd
 0001 34                pshx
 0002 B775              tfr s,x
 0004 1B9E              leas -2,sp
 0006                   .dbline -1
 0006                   .dbline 19
 0006           ; // By Korey Conway and Tanzeel Rana
 0006           ; 
 0006           ; #include <hcs12dp256.h>
 0006           ; #include <stdio.h>
 0006           ; #include "../lib/stepper.c"
 0006           ; 
 0006           ; #define RTI_CTL       0x7F // run real-time interrupt at 8Hz
 0006           ; #define RTI_FREQUENCY 8
 0006           ; 
 0006           ; void rti_init(void);
 0006           ; void rti_handler(void);
 0006           ; void rti_every_second(void);
 0006           ; void trigger_collision(void);
 0006           ; void collision_avoidance(void);
 0006           ; 
 0006           ; // Global variables
 0006           ; int collision_detected = 0;
 0006           ; int temperature = 0;
 0006           ; 
 0006                   .dbline 20
 0006 201C              bra L7
 0008           L4:
 0008                   .dbline 20
 0008                   .dbline 21
 0008 EC02              ldd 2,x
 000A CD0004            ldy #4
 000D B7D6              exg x,y
 000F 1815              idivs
 0011 B7D6              exg x,y
 0013 6C1E              std -2,x
 0015 CC0003            ldd #3
 0018 A31E              subd -2,x
 001A 160053            jsr _stepper_set_step
 001D                   .dbline 22
 001D           L5:
 001D                   .dbline 20
 001D EC02              ldd 2,x
 001F 830001            subd #1
 0022 6C02              std 2,x
 0024           L7:
 0024                   .dbline 20
 0024           ; int main()
 0024 EC02              ldd 2,x
 0026 2EE0              bgt L4
 0028                   .dbline -2
 0028                   .dbline 23
 0028           ; {
 0028           ;       // not enough time to finish, sorry
 0028           ;       //setbaud(BAUD19K);
 0028           L3:
 0028 B757              tfr x,s
 002A 30                pulx
 002B 1B82              leas 2,sp
 002D                   .dbline 0 ; func end
 002D 3D                rts
 002E                   .dbsym l steps 2 I
 002E                   .dbend
 002E                   .dbfunc e stepper_turn_ccw _stepper_turn_ccw fV
 002E           ;          steps -> 2,x
 002E           _stepper_turn_ccw::
 002E 3B                pshd
 002F 34                pshx
 0030 B775              tfr s,x
 0032                   .dbline -1
 0032                   .dbline 29
 0032           ;       //stepper_init();
 0032           ;       //rti_init();
 0032           ;       
 0032           ;       //temperature = 56; // not sure why we need a global temperature variable but the assignment asks for it
 0032           ; 
 0032           ;       //while ( 1 );
 0032                   .dbline 30
 0032 2015              bra L12
 0034           L9:
 0034                   .dbline 30
 0034                   .dbline 31
 0034 EC02              ldd 2,x
 0036 CD0004            ldy #4
 0039 B7D6              exg x,y
 003B 1815              idivs
 003D B7D6              exg x,y
 003F 160053            jsr _stepper_set_step
 0042                   .dbline 32
 0042           L10:
 0042                   .dbline 30
 0042 EC02              ldd 2,x
 0044 830001            subd #1
 0047 6C02              std 2,x
 0049           L12:
 0049                   .dbline 30
 0049           ;       return 0;
 0049 EC02              ldd 2,x
 004B 2EE7              bgt L9
 004D                   .dbline -2
 004D                   .dbline 33
 004D           ; }
 004D           ; 
 004D           ; /*
 004D           L8:
 004D B757              tfr x,s
 004F 30                pulx
 0050 1B82              leas 2,sp
 0052                   .dbline 0 ; func end
 0052 3D                rts
 0053                   .dbsym l steps 2 I
 0053                   .dbend
 0053                   .dbfunc e stepper_set_step _stepper_set_step fV
 0053           ;     coded_step -> -2,x
 0053           ;           step -> 2,x
 0053           _stepper_set_step::
 0053 3B                pshd
 0054 34                pshx
 0055 B775              tfr s,x
 0057 1B9C              leas -4,sp
 0059                   .dbline -1
 0059                   .dbline 39
 0059           ;       Initialize the real-time interrupt
 0059           ; */
 0059           ; void rti_init()
 0059           ; {
 0059           ;       CRGINT |= 0x80;
 0059           ;       RTICTL = 0x7F; // runs at 8Hz
 0059                   .dbline 40
 0059           ;       asm("cli");
 0059 CC0000            ldd #0
 005C 6C1E              std -2,x
 005E                   .dbline 43
 005E           ; }
 005E           ; 
 005E           ; /*
 005E EC02              ldd 2,x
 0060 8C0002            cpd #2
 0063 2607              bne L14
 0065                   .dbline 43
 0065                   .dbline 44
 0065           ;       The RTI handler. For now this simply calls rti_every_second() every second
 0065 CC0003            ldd #3
 0068 6C1E              std -2,x
 006A                   .dbline 45
 006A 2012              bra L15
 006C           L14:
 006C                   .dbline 45
 006C           ; */
 006C EC02              ldd 2,x
 006E 8C0003            cpd #3
 0071 2607              bne L16
 0073                   .dbline 45
 0073                   .dbline 46
 0073           ; #pragma interrupt_handler rti_handler
 0073 CC0002            ldd #2
 0076 6C1E              std -2,x
 0078                   .dbline 47
 0078 2004              bra L17
 007A           L16:
 007A                   .dbline 47
 007A           ; void rti_handler()
 007A                   .dbline 48
 007A           ; {
 007A 1802021E          movw 2,x,-2,x
 007E                   .dbline 49
 007E           ;       static int count = 0;
 007E           L17:
 007E           L15:
 007E                   .dbline 52
 007E           ;       
 007E           ;       if ( ++count == RTI_FREQUENCY ) {
 007E           ;               count = 0;
 007E EC1E              ldd -2,x
 0080 59                lsld
 0081 59                lsld
 0082 59                lsld
 0083 59                lsld
 0084 59                lsld
 0085 6C1C              std -4,x
 0087                   ; vol
 0087 F60240            ldab 0x240
 008A 87                clra
 008B 84FF              anda #255
 008D C49F              andb #159
 008F AA1C              ora -4,x
 0091 EA1D              orb -3,x
 0093 7B0240            stab 0x240
 0096                   .dbline 57
 0096           ;               rti_every_second();
 0096           ;       }
 0096           ;       
 0096           ;       // Clear the interrupt
 0096           ;       CRGFLG |= 0x80;
 0096 CCF000            ldd #0xf000
 0099 1600AF            jsr _stepper_delay
 009C                   .dbline -2
 009C                   .dbline 58
 009C           ; }
 009C           L13:
 009C B757              tfr x,s
 009E 30                pulx
 009F 1B82              leas 2,sp
 00A1                   .dbline 0 ; func end
 00A1 3D                rts
 00A2                   .dbsym l coded_step -2 I
 00A2                   .dbsym l step 2 I
 00A2                   .dbend
 00A2                   .dbfunc e stepper_init _stepper_init fV
 00A2           _stepper_init::
 00A2                   .dbline -1
 00A2                   .dbline 64
 00A2           ; 
 00A2           ; /*
 00A2           ;       Simulate a collision warning
 00A2           ; */
 00A2           ; void trigger_collision()
 00A2           ; {
 00A2                   .dbline 65
 00A2           ;       collision_detected = 1;
 00A2 1C025A20          bset 0x25a,#32
 00A6                   .dbline 66
 00A6           ; }
 00A6 1C024260          bset 0x242,#96
 00AA                   .dbline 67
 00AA           ; 
 00AA 1C025820          bset 0x258,#32
 00AE                   .dbline -2
 00AE                   .dbline 68
 00AE           ; /*
 00AE           L18:
 00AE                   .dbline 0 ; func end
 00AE 3D                rts
 00AF                   .dbend
 00AF                   .dbfunc s stepper_delay _stepper_delay fV
 00AF           ;          delay -> 2,x
 00AF           _stepper_delay:
 00AF 3B                pshd
 00B0 34                pshx
 00B1 B775              tfr s,x
 00B3                   .dbline -1
 00B3                   .dbline 74
 00B3           ;       This gets run every second
 00B3           ; */
 00B3           ; void rti_every_second()
 00B3           ; {
 00B3           ;       static int seconds = 0;
 00B3           ;       
 00B3                   .dbline 75
 00B3 2007              bra L23
 00B5           L20:
 00B5                   .dbline 75
 00B5                   .dbline 75
 00B5           L21:
 00B5                   .dbline 75
 00B5 EC02              ldd 2,x
 00B7 830001            subd #1
 00BA 6C02              std 2,x
 00BC           L23:
 00BC                   .dbline 75
 00BC           ;       // Run the collision avoidance algorithm
 00BC EC02              ldd 2,x
 00BE 26F5              bne L20
 00C0                   .dbline -2
 00C0                   .dbline 76
 00C0           ;       collision_avoidance();
 00C0           L19:
 00C0 B757              tfr x,s
 00C2 30                pulx
 00C3 1B82              leas 2,sp
 00C5                   .dbline 0 ; func end
 00C5 3D                rts
 00C6                   .dbsym l delay 2 i
 00C6                   .dbend
                        .area data
 0000                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1/../lib/stepper.c
 0000           _collision_detected::
 0000                   .blkb 2
                        .area idata
 0000 0000              .word 0
                        .area data
 0002                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1/../lib/stepper.c
 0002                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
 0002                   .dbsym e collision_detected _collision_detected I
 0002           _temperature::
 0002                   .blkb 2
                        .area idata
 0002 0000              .word 0
                        .area data
 0004                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
 0004                   .dbsym e temperature _temperature I
                        .area text
 00C6                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
 00C6                   .dbfunc e main _main fI
 00C6           _main::
 00C6                   .dbline -1
 00C6                   .dbline 21
 00C6                   .dbline 30
 00C6 CC0000            ldd #0
 00C9                   .dbline -2
 00C9           L24:
 00C9                   .dbline 0 ; func end
 00C9 3D                rts
 00CA                   .dbend
 00CA                   .dbfunc e rti_init _rti_init fV
 00CA           _rti_init::
 00CA                   .dbline -1
 00CA                   .dbline 37
 00CA                   .dbline 38
 00CA 1C003880          bset 0x38,#128
 00CE                   .dbline 39
 00CE C67F              ldab #127
 00D0 7B003B            stab 0x3b
 00D3                   .dbline 40
 00D3 10EF                      cli
 00D5           
 00D5                   .dbline -2
 00D5                   .dbline 41
 00D5           L25:
 00D5                   .dbline 0 ; func end
 00D5 3D                rts
 00D6                   .dbend
                        .area data
 0004                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
 0004           L27:
 0004                   .blkb 2
                        .area idata
 0004 0000              .word 0
                        .area data
 0006                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
                        .area text
 00D6                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
 00D6                   .dbfunc e rti_handler _rti_handler fV
 00D6                   .dbsym s count L27 I
 00D6           ;          ?temp -> -2,x
 00D6           _rti_handler::
 00D6 34                pshx
 00D7 B775              tfr s,x
 00D9 1B9E              leas -2,sp
 00DB                   .dbline -1
 00DB                   .dbline 48
 00DB                   .dbline 51
 00DB FC0004            ldd L27
 00DE C30001            addd #1
 00E1 6C1E              std -2,x
 00E3 18051E0004        movw -2,x,L27
 00E8 EC1E              ldd -2,x
 00EA 8C0008            cpd #8
 00ED 2609              bne L28
 00EF                   .dbline 51
 00EF                   .dbline 52
 00EF CC0000            ldd #0
 00F2 7C0004            std L27
 00F5                   .dbline 53
 00F5 160107            jsr _rti_every_second
 00F8                   .dbline 54
 00F8           L28:
 00F8                   .dbline 57
 00F8 1C003780          bset 0x37,#128
 00FC                   .dbline -2
 00FC                   .dbline 58
 00FC           L26:
 00FC B757              tfr x,s
 00FE 30                pulx
 00FF                   .dbline 0 ; func end
 00FF 0B                rti
 0100                   .dbend
 0100                   .dbfunc e trigger_collision _trigger_collision fV
 0100           _trigger_collision::
 0100                   .dbline -1
 0100                   .dbline 64
 0100                   .dbline 65
 0100 CC0001            ldd #1
 0103 7C0000            std _collision_detected
 0106                   .dbline -2
 0106                   .dbline 66
 0106           L30:
 0106                   .dbline 0 ; func end
 0106 3D                rts
 0107                   .dbend
                        .area data
 0006                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
 0006           L32:
 0006                   .blkb 2
                        .area idata
 0006 0000              .word 0
                        .area data
 0008                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
                        .area text
 0107                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
 0107                   .dbfunc e rti_every_second _rti_every_second fV
 0107                   .dbsym s seconds L32 I
 0107           _rti_every_second::
 0107                   .dbline -1
 0107                   .dbline 72
 0107                   .dbline 76
 0107 160125            jsr _collision_avoidance
 010A                   .dbline 79
 010A FC0006            ldd L32
 010D C30001            addd #1
 0110 CD0006            ldy #6
 0113 B7D6              exg x,y
 0115 1815              idivs
 0117 B7D6              exg x,y
 0119 7C0006            std L32
 011C                   .dbline 80
 011C FC0006            ldd L32
 011F 2603              bne L33
 0121                   .dbline 80
 0121                   .dbline 81
 0121 160100            jsr _trigger_collision
 0124                   .dbline 82
 0124           L33:
 0124                   .dbline -2
 0124                   .dbline 83
 0124           ;       
 0124           ;       // Simulate collisions at an interval
 0124           ;       seconds = (seconds + 1) % 6;
 0124           ;       if ( seconds == 0 ) {
 0124           ;               trigger_collision();
 0124           ;       }
 0124           ; }
 0124           L31:
 0124                   .dbline 0 ; func end
 0124 3D                rts
 0125                   .dbend
                        .area data
 0008                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
 0008           L36:
 0008                   .blkb 2
                        .area idata
 0008 0000              .word 0
                        .area data
 000A                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
 000A           L37:
 000A                   .blkb 2
                        .area idata
 000A 0000              .word 0
                        .area data
 000C                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
                        .area text
 0125                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
 0125                   .dbfunc e collision_avoidance _collision_avoidance fV
 0125                   .dbsym s state L37 I
 0125                   .dbsym s seconds L36 I
 0125           ;          ?temp -> -4,x
 0125           ;          ?temp -> -2,x
 0125           _collision_avoidance::
 0125 34                pshx
 0126 B775              tfr s,x
 0128 1B9C              leas -4,sp
 012A                   .dbline -1
 012A                   .dbline 89
 012A           ; 
 012A           ; /*
 012A           ;       This is executes the algorithm provided in the labs to avoid a collision
 012A           ; */
 012A           ; void collision_avoidance()
 012A           ; {
 012A                   .dbline 98
 012A           ;       #define COLLISION_AVOID_STATE_INITIAL   0
 012A           ;       #define COLLISION_AVOID_STATE_WAIT              1
 012A           ;       #define COLLISION_AVOID_STATE_ROTATE90  2
 012A           ;       #define COLLISION_AVOID_STATE_CONTINUE  3
 012A           ; 
 012A           ;       static int seconds = 0;
 012A           ;       static int state = 0;
 012A           ;       
 012A           ;       if ( collision_detected ) {
 012A FC0000            ldd _collision_detected
 012D 182700B2          lbeq L38
 0131                   .dbline 98
 0131                   .dbline 99
 0131 FC000A            ldd L37
 0134 2714              beq L42
 0136 FC000A            ldd L37
 0139 8C0001            cpd #1
 013C 2722              beq L44
 013E FC000A            ldd L37
 0141 8C0002            cpd #2
 0144 2742              beq L48
 0146 1820007F          lbra L40
 014A           X0:
 014A                   .dbline 99
 014A           ;               switch ( state ) {
 014A           L42:
 014A                   .dbline 102
 014A           ;                       case COLLISION_AVOID_STATE_INITIAL:
 014A           ;                               // we would stop the forward motors here
 014A           ;                               printf("\n\nCollision warning!!\nStopping motors.\n");
 014A CC0290            ldd #L43
 014D 160000            jsr _printf
 0150                   .dbline 103
 0150           ;                               seconds = 0;
 0150 CC0000            ldd #0
 0153 7C0008            std L36
 0156                   .dbline 104
 0156           ;                               state = COLLISION_AVOID_STATE_WAIT;
 0156 CC0001            ldd #1
 0159 7C000A            std L37
 015C                   .dbline 105
 015C           ;                               break;
 015C 18200089          lbra L39
 0160           L44:
 0160                   .dbline 108
 0160           ;                       case COLLISION_AVOID_STATE_WAIT:
 0160           ;                               // wait 2 seconds before changing to next state (total time will be 3 second wait)
 0160           ;                               printf("Waiting for motors to be stopped\n");
 0160 CC026E            ldd #L45
 0163 160000            jsr _printf
 0166                   .dbline 109
 0166           ;                               if ( ++seconds >= 2 ) {
 0166 FC0008            ldd L36
 0169 C30001            addd #1
 016C 6C1E              std -2,x
 016E 18051E0008        movw -2,x,L36
 0173 EC1E              ldd -2,x
 0175 8C0002            cpd #2
 0178 2D6F              blt L39
 017A                   .dbline 109
 017A                   .dbline 110
 017A           ;                                       seconds = 0;
 017A CC0000            ldd #0
 017D 7C0008            std L36
 0180                   .dbline 111
 0180           ;                                       state = COLLISION_AVOID_STATE_ROTATE90;
 0180 CC0002            ldd #2
 0183 7C000A            std L37
 0186                   .dbline 112
 0186           ;                               }
 0186                   .dbline 113
 0186           ;                               break;
 0186 2061              bra L39
 0188           L48:
 0188                   .dbline 115
 0188           ;                       case COLLISION_AVOID_STATE_ROTATE90:
 0188           ;                               if ( seconds == 0 ) {
 0188 FC0008            ldd L36
 018B 260E              bne L49
 018D                   .dbline 115
 018D                   .dbline 116
 018D           ;                                       printf("Rotating 90 degrees to the right.\n");
 018D CC024B            ldd #L51
 0190 160000            jsr _printf
 0193                   .dbline 117
 0193           ;                                       stepper_turn_cw(STEPPER_STEPS_PER_QUARTER);
 0193 CC0005            ldd #5
 0196 160000            jsr _stepper_turn_cw
 0199                   .dbline 118
 0199 2006              bra L50
 019B           L49:
 019B                   .dbline 118
 019B           ;                               } else {
 019B                   .dbline 119
 019B           ;                                       printf("Waiting another second.\n");
 019B CC0232            ldd #L52
 019E 160000            jsr _printf
 01A1                   .dbline 120
 01A1           ;                               }
 01A1           L50:
 01A1                   .dbline 122
 01A1           ;                               
 01A1           ;                               if ( ++seconds >= 2 ) {
 01A1 FC0008            ldd L36
 01A4 C30001            addd #1
 01A7 6C1C              std -4,x
 01A9 18051C0008        movw -4,x,L36
 01AE EC1C              ldd -4,x
 01B0 8C0002            cpd #2
 01B3 2D34              blt L39
 01B5                   .dbline 122
 01B5                   .dbline 124
 01B5           ;                                       // Go back into initial state and reset collision detection
 01B5           ;                                       seconds = 0;
 01B5 CC0000            ldd #0
 01B8 7C0008            std L36
 01BB                   .dbline 125
 01BB           ;                                       state = COLLISION_AVOID_STATE_INITIAL;
 01BB CC0000            ldd #0
 01BE 7C000A            std L37
 01C1                   .dbline 126
 01C1           ;                                       collision_detected = 0;
 01C1 CC0000            ldd #0
 01C4 7C0000            std _collision_detected
 01C7                   .dbline 129
 01C7           ;                                       
 01C7           ;                                       // We would start the forward motors here
 01C7           ;                               }
 01C7                   .dbline 130
 01C7           ;                               break;
 01C7 2020              bra L39
 01C9           L40:
 01C9                   .dbline 132
 01C9           ;                       default:
 01C9           ;                               printf("Unknown collision state, return to initial.\n");
 01C9 CC0205            ldd #L55
 01CC 160000            jsr _printf
 01CF                   .dbline 133
 01CF           ;                               seconds = 0;
 01CF CC0000            ldd #0
 01D2 7C0008            std L36
 01D5                   .dbline 134
 01D5           ;                               state = COLLISION_AVOID_STATE_INITIAL;
 01D5 CC0000            ldd #0
 01D8 7C000A            std L37
 01DB                   .dbline 135
 01DB           ;                               collision_detected = 0;
 01DB CC0000            ldd #0
 01DE 7C0000            std _collision_detected
 01E1                   .dbline 136
 01E1           ;               }
 01E1                   .dbline 137
 01E1 2006              bra L39
 01E3           L38:
 01E3                   .dbline 137
 01E3                   .dbline 138
 01E3 CC01ED            ldd #L56
 01E6 160000            jsr _printf
 01E9                   .dbline 139
 01E9           L39:
 01E9                   .dbline -2
 01E9                   .dbline 140
 01E9           ;       } else {
 01E9           ;               printf("No collisions detected\n");
 01E9           ;       }
 01E9           ; }
 01E9           L35:
 01E9 B757              tfr x,s
 01EB 30                pulx
 01EC                   .dbline 0 ; func end
 01EC 3D                rts
 01ED                   .dbend
 01ED           L56:
 01ED 4E6F20636F6C6C6973696F6E73206465  .byte 'N,'o,32,'c,'o,'l,'l,'i,'s,'i,'o,'n,'s,32,'d,'e
 01FD 7465637465640A00  .byte 't,'e,'c,'t,'e,'d,10,0
 0205           L55:
 0205 556E6B6E6F776E20636F6C6C6973696F  .byte 'U,'n,'k,'n,'o,'w,'n,32,'c,'o,'l,'l,'i,'s,'i,'o
 0215 6E2073746174652C2072657475726E20  .byte 'n,32,'s,'t,'a,'t,'e,44,32,'r,'e,'t,'u,'r,'n,32
 0225 746F20696E697469616C2E0A00        .byte 't,'o,32,'i,'n,'i,'t,'i,'a,'l,46,10,0
 0232           L52:
 0232 57616974696E6720616E6F7468657220  .byte 'W,'a,'i,'t,'i,'n,'g,32,'a,'n,'o,'t,'h,'e,'r,32
 0242 7365636F6E642E0A00        .byte 's,'e,'c,'o,'n,'d,46,10,0
 024B           L51:
 024B 526F746174696E672039302064656772  .byte 'R,'o,'t,'a,'t,'i,'n,'g,32,57,48,32,'d,'e,'g,'r
 025B 65657320746F20746865207269676874  .byte 'e,'e,'s,32,'t,'o,32,'t,'h,'e,32,'r,'i,'g,'h,'t
 026B 2E0A00            .byte 46,10,0
 026E           L45:
 026E 57616974696E6720666F72206D6F746F  .byte 'W,'a,'i,'t,'i,'n,'g,32,'f,'o,'r,32,'m,'o,'t,'o
 027E 727320746F2062652073746F70706564  .byte 'r,'s,32,'t,'o,32,'b,'e,32,'s,'t,'o,'p,'p,'e,'d
 028E 0A00              .byte 10,0
 0290           L43:
 0290 0A0A436F6C6C6973696F6E207761726E  .byte 10,10,'C,'o,'l,'l,'i,'s,'i,'o,'n,32,'w,'a,'r,'n
 02A0 696E6721210A53746F7070696E67206D  .byte 'i,'n,'g,33,33,10,'S,'t,'o,'p,'p,'i,'n,'g,32,'m
 02B0 6F746F72732E0A00  .byte 'o,'t,'o,'r,'s,46,10,0
