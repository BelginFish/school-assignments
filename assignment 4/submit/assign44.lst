WARNING: EXTCODE CODE AREA DO NOT CONTAIN RELOCATED ADDRESSES.
THIS WILL BE REMEDIED IN A LATER RELEASE.
                        .module vectors_dp256_NoICE.c
                        .area memory(abs)
                        .org 0x3f8c
 3F8C            _interrupt_vectors::
 3F8C  F8CF              .word 63695
 3F8E  F8CF              .word 63695
 3F90  F8CF              .word 63695
 3F92  F8CF              .word 63695
 3F94  F8CF              .word 63695
 3F96  F8CF              .word 63695
 3F98  F8CF              .word 63695
 3F9A  F8CF              .word 63695
 3F9C  F8CF              .word 63695
 3F9E  F8CF              .word 63695
 3FA0  F8CF              .word 63695
 3FA2  F8CF              .word 63695
 3FA4  F8CF              .word 63695
 3FA6  F8CF              .word 63695
 3FA8  F8CF              .word 63695
 3FAA  F8CF              .word 63695
 3FAC  F8CF              .word 63695
 3FAE  F8CF              .word 63695
 3FB0  F8CF              .word 63695
 3FB2  F8CF              .word 63695
 3FB4  F8CF              .word 63695
 3FB6  F8CF              .word 63695
 3FB8  F8CF              .word 63695
 3FBA  F8CF              .word 63695
 3FBC  F8CF              .word 63695
 3FBE  F8CF              .word 63695
 3FC0  F8CF              .word 63695
 3FC2  F8CF              .word 63695
 3FC4  F8CF              .word 63695
 3FC6  F8CF              .word 63695
 3FC8  F8CF              .word 63695
 3FCA  F8CF              .word 63695
 3FCC  F8CF              .word 63695
 3FCE  F8CF              .word 63695
 3FD0  F8CF              .word 63695
 3FD2  F8CF              .word 63695
 3FD4  F8CF              .word 63695
 3FD6  F8CF              .word 63695
 3FD8  F8CF              .word 63695
 3FDA  F8CF              .word 63695
 3FDC  F8CF              .word 63695
 3FDE  F8CF              .word 63695
 3FE0  F8CF              .word 63695
 3FE2  F8CF              .word 63695
 3FE4  F8CF              .word 63695
 3FE6  F8CF              .word 63695
 3FE8  F8CF              .word 63695
 3FEA  F8CF              .word 63695
 3FEC  F8CF              .word 63695
 3FEE  F8CF              .word 63695
 3FF0  4100              .word _rti_handler
 3FF2  F8CF              .word 63695
 3FF4  F8C7              .word 63687
 3FF6  F8C3              .word 63683
 3FF8  F8CB              .word 63691
 3FFA  F805              .word 63493
 3FFC  F809              .word 63497
 3FFE  4000              .word __start
 4000                    .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\vectors_dp256_NoICE.c
 4000                    .dbsym e interrupt_vectors _interrupt_vectors A[116:58]pfV
                        .area data
--- 0000                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\vectors_dp256_NoICE.c
                        .module assign44.c
                        .area text
--- 0000                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1/../lib/stepper.c
--- 0000                   .dbfunc e stepper_turn_cw _stepper_turn_cw fV
--- 0000           ;          steps -> 2,x
 402A            _stepper_turn_cw::
 402A  3B                pshd
 402B  34                pshx
 402C  B775              tfr s,x
 402E  1B9E              leas -2,sp
 4030                    .dbline -1
 4030                    .dbline 19
 4030            ; // By Korey Conway and Tanzeel Rana
 4030            ; 
 4030            ; #include <hcs12dp256.h>
 4030            ; #include <stdio.h>
 4030            ; #include "../lib/stepper.c"
 4030            ; 
 4030            ; #define RTI_CTL       0x7F // run real-time interrupt at 8Hz
 4030            ; #define RTI_FREQUENCY 8
 4030            ; 
 4030            ; void rti_init(void);
 4030            ; void rti_handler(void);
 4030            ; void rti_every_second(void);
 4030            ; void trigger_collision(void);
 4030            ; void collision_avoidance(void);
 4030            ; 
 4030            ; // Global variables
 4030            ; int collision_detected = 0;
 4030            ; int temperature = 0;
 4030            ; 
 4030                    .dbline 20
 4030  201C              bra L7
 4032            L4:
 4032                    .dbline 20
 4032                    .dbline 21
 4032  EC02              ldd 2,x
 4034  CD0004            ldy #4
 4037  B7D6              exg x,y
 4039  1815              idivs
 403B  B7D6              exg x,y
 403D  6C1E              std -2,x
 403F  CC0003            ldd #3
 4042  A31E              subd -2,x
 4044  16407D            jsr _stepper_set_step
 4047                    .dbline 22
 4047            L5:
 4047                    .dbline 20
 4047  EC02              ldd 2,x
 4049  830001            subd #1
 404C  6C02              std 2,x
 404E            L7:
 404E                    .dbline 20
 404E            ; int main()
 404E  EC02              ldd 2,x
 4050  2EE0              bgt L4
 4052                    .dbline -2
 4052                    .dbline 23
 4052            ; {
 4052            ;       // not enough time to finish, sorry
 4052            ;       //setbaud(BAUD19K);
 4052            L3:
 4052  B757              tfr x,s
 4054  30                pulx
 4055  1B82              leas 2,sp
 4057                    .dbline 0 ; func end
 4057  3D                rts
 4058                    .dbsym l steps 2 I
 4058                    .dbend
 4058                    .dbfunc e stepper_turn_ccw _stepper_turn_ccw fV
 4058            ;          steps -> 2,x
 4058            _stepper_turn_ccw::
 4058  3B                pshd
 4059  34                pshx
 405A  B775              tfr s,x
 405C                    .dbline -1
 405C                    .dbline 29
 405C            ;       //stepper_init();
 405C            ;       //rti_init();
 405C            ;       
 405C            ;       //temperature = 56; // not sure why we need a global temperature variable but the assignment asks for it
 405C            ; 
 405C            ;       //while ( 1 );
 405C                    .dbline 30
 405C  2015              bra L12
 405E            L9:
 405E                    .dbline 30
 405E                    .dbline 31
 405E  EC02              ldd 2,x
 4060  CD0004            ldy #4
 4063  B7D6              exg x,y
 4065  1815              idivs
 4067  B7D6              exg x,y
 4069  16407D            jsr _stepper_set_step
 406C                    .dbline 32
 406C            L10:
 406C                    .dbline 30
 406C  EC02              ldd 2,x
 406E  830001            subd #1
 4071  6C02              std 2,x
 4073            L12:
 4073                    .dbline 30
 4073            ;       return 0;
 4073  EC02              ldd 2,x
 4075  2EE7              bgt L9
 4077                    .dbline -2
 4077                    .dbline 33
 4077            ; }
 4077            ; 
 4077            ; /*
 4077            L8:
 4077  B757              tfr x,s
 4079  30                pulx
 407A  1B82              leas 2,sp
 407C                    .dbline 0 ; func end
 407C  3D                rts
 407D                    .dbsym l steps 2 I
 407D                    .dbend
 407D                    .dbfunc e stepper_set_step _stepper_set_step fV
 407D            ;     coded_step -> -2,x
 407D            ;           step -> 2,x
 407D            _stepper_set_step::
 407D  3B                pshd
 407E  34                pshx
 407F  B775              tfr s,x
 4081  1B9C              leas -4,sp
 4083                    .dbline -1
 4083                    .dbline 39
 4083            ;       Initialize the real-time interrupt
 4083            ; */
 4083            ; void rti_init()
 4083            ; {
 4083            ;       CRGINT |= 0x80;
 4083            ;       RTICTL = 0x7F; // runs at 8Hz
 4083                    .dbline 40
 4083            ;       asm("cli");
 4083  CC0000            ldd #0
 4086  6C1E              std -2,x
 4088                    .dbline 43
 4088            ; }
 4088            ; 
 4088            ; /*
 4088  EC02              ldd 2,x
 408A  8C0002            cpd #2
 408D  2607              bne L14
 408F                    .dbline 43
 408F                    .dbline 44
 408F            ;       The RTI handler. For now this simply calls rti_every_second() every second
 408F  CC0003            ldd #3
 4092  6C1E              std -2,x
 4094                    .dbline 45
 4094  2012              bra L15
 4096            L14:
 4096                    .dbline 45
 4096            ; */
 4096  EC02              ldd 2,x
 4098  8C0003            cpd #3
 409B  2607              bne L16
 409D                    .dbline 45
 409D                    .dbline 46
 409D            ; #pragma interrupt_handler rti_handler
 409D  CC0002            ldd #2
 40A0  6C1E              std -2,x
 40A2                    .dbline 47
 40A2  2004              bra L17
 40A4            L16:
 40A4                    .dbline 47
 40A4            ; void rti_handler()
 40A4                    .dbline 48
 40A4            ; {
 40A4  1802021E          movw 2,x,-2,x
 40A8                    .dbline 49
 40A8            ;       static int count = 0;
 40A8            L17:
 40A8            L15:
 40A8                    .dbline 52
 40A8            ;       
 40A8            ;       if ( ++count == RTI_FREQUENCY ) {
 40A8            ;               count = 0;
 40A8  EC1E              ldd -2,x
 40AA  59                lsld
 40AB  59                lsld
 40AC  59                lsld
 40AD  59                lsld
 40AE  59                lsld
 40AF  6C1C              std -4,x
 40B1                    ; vol
 40B1  F60240            ldab 0x240
 40B4  87                clra
 40B5  84FF              anda #255
 40B7  C49F              andb #159
 40B9  AA1C              ora -4,x
 40BB  EA1D              orb -3,x
 40BD  7B0240            stab 0x240
 40C0                    .dbline 57
 40C0            ;               rti_every_second();
 40C0            ;       }
 40C0            ;       
 40C0            ;       // Clear the interrupt
 40C0            ;       CRGFLG |= 0x80;
 40C0  CCF000            ldd #0xf000
 40C3  1640D9            jsr _stepper_delay
 40C6                    .dbline -2
 40C6                    .dbline 58
 40C6            ; }
 40C6            L13:
 40C6  B757              tfr x,s
 40C8  30                pulx
 40C9  1B82              leas 2,sp
 40CB                    .dbline 0 ; func end
 40CB  3D                rts
 40CC                    .dbsym l coded_step -2 I
 40CC                    .dbsym l step 2 I
 40CC                    .dbend
 40CC                    .dbfunc e stepper_init _stepper_init fV
 40CC            _stepper_init::
 40CC                    .dbline -1
 40CC                    .dbline 64
 40CC            ; 
 40CC            ; /*
 40CC            ;       Simulate a collision warning
 40CC            ; */
 40CC            ; void trigger_collision()
 40CC            ; {
 40CC                    .dbline 65
 40CC            ;       collision_detected = 1;
 40CC  1C025A20          bset 0x25a,#32
 40D0                    .dbline 66
 40D0            ; }
 40D0  1C024260          bset 0x242,#96
 40D4                    .dbline 67
 40D4            ; 
 40D4  1C025820          bset 0x258,#32
 40D8                    .dbline -2
 40D8                    .dbline 68
 40D8            ; /*
 40D8            L18:
 40D8                    .dbline 0 ; func end
 40D8  3D                rts
 40D9                    .dbend
 40D9                    .dbfunc s stepper_delay _stepper_delay fV
 40D9            ;          delay -> 2,x
 40D9            _stepper_delay:
 40D9  3B                pshd
 40DA  34                pshx
 40DB  B775              tfr s,x
 40DD                    .dbline -1
 40DD                    .dbline 74
 40DD            ;       This gets run every second
 40DD            ; */
 40DD            ; void rti_every_second()
 40DD            ; {
 40DD            ;       static int seconds = 0;
 40DD            ;       
 40DD                    .dbline 75
 40DD  2007              bra L23
 40DF            L20:
 40DF                    .dbline 75
 40DF                    .dbline 75
 40DF            L21:
 40DF                    .dbline 75
 40DF  EC02              ldd 2,x
 40E1  830001            subd #1
 40E4  6C02              std 2,x
 40E6            L23:
 40E6                    .dbline 75
 40E6            ;       // Run the collision avoidance algorithm
 40E6  EC02              ldd 2,x
 40E8  26F5              bne L20
 40EA                    .dbline -2
 40EA                    .dbline 76
 40EA            ;       collision_avoidance();
 40EA            L19:
 40EA  B757              tfr x,s
 40EC  30                pulx
 40ED  1B82              leas 2,sp
 40EF                    .dbline 0 ; func end
 40EF  3D                rts
 40F0                    .dbsym l delay 2 i
 40F0                    .dbend
                        .area data
--- 0000                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1/../lib/stepper.c
 1000            _collision_detected::
 1000                    .blkb 2
                        .area idata
--- 0000 0000              .word 0
                        .area data
--- 0002                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1/../lib/stepper.c
--- 0002                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
--- 0002                   .dbsym e collision_detected _collision_detected I
 1002            _temperature::
 1002                    .blkb 2
                        .area idata
--- 0002 0000              .word 0
                        .area data
--- 0004                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
--- 0004                   .dbsym e temperature _temperature I
                        .area text
--- 00C6                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
--- 00C6                   .dbfunc e main _main fI
 40F0            _main::
 40F0                    .dbline -1
 40F0                    .dbline 21
 40F0                    .dbline 30
 40F0  CC0000            ldd #0
 40F3                    .dbline -2
 40F3            L24:
 40F3                    .dbline 0 ; func end
 40F3  3D                rts
 40F4                    .dbend
 40F4                    .dbfunc e rti_init _rti_init fV
 40F4            _rti_init::
 40F4                    .dbline -1
 40F4                    .dbline 37
 40F4                    .dbline 38
 40F4  1C003880          bset 0x38,#128
 40F8                    .dbline 39
 40F8  C67F              ldab #127
 40FA  7B003B            stab 0x3b
 40FD                    .dbline 40
 40FD  10EF                      cli
 40FF            
 40FF                    .dbline -2
 40FF                    .dbline 41
 40FF            L25:
 40FF                    .dbline 0 ; func end
 40FF  3D                rts
 4100                    .dbend
                        .area data
--- 0004                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
--- 0004           L27:
--- 0004                   .blkb 2
                        .area idata
--- 0004 0000              .word 0
                        .area data
--- 0006                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
                        .area text
--- 00D6                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
--- 00D6                   .dbfunc e rti_handler _rti_handler fV
--- 00D6                   .dbsym s count L27 I
--- 00D6           ;          ?temp -> -2,x
 4100            _rti_handler::
 4100  34                pshx
 4101  B775              tfr s,x
 4103  1B9E              leas -2,sp
 4105                    .dbline -1
 4105                    .dbline 48
 4105                    .dbline 51
 4105  FC1004            ldd L27
 4108  C30001            addd #1
 410B  6C1E              std -2,x
 410D  18051E1004        movw -2,x,L27
 4112  EC1E              ldd -2,x
 4114  8C0008            cpd #8
 4117  2609              bne L28
 4119                    .dbline 51
 4119                    .dbline 52
 4119  CC0000            ldd #0
 411C  7C1004            std L27
 411F                    .dbline 53
 411F  164131            jsr _rti_every_second
 4122                    .dbline 54
 4122            L28:
 4122                    .dbline 57
 4122  1C003780          bset 0x37,#128
 4126                    .dbline -2
 4126                    .dbline 58
 4126            L26:
 4126  B757              tfr x,s
 4128  30                pulx
 4129                    .dbline 0 ; func end
 4129  0B                rti
 412A                    .dbend
 412A                    .dbfunc e trigger_collision _trigger_collision fV
 412A            _trigger_collision::
 412A                    .dbline -1
 412A                    .dbline 64
 412A                    .dbline 65
 412A  CC0001            ldd #1
 412D  7C1000            std _collision_detected
 4130                    .dbline -2
 4130                    .dbline 66
 4130            L30:
 4130                    .dbline 0 ; func end
 4130  3D                rts
 4131                    .dbend
                        .area data
--- 0006                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
--- 0006           L32:
--- 0006                   .blkb 2
                        .area idata
--- 0006 0000              .word 0
                        .area data
--- 0008                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
                        .area text
--- 0107                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
--- 0107                   .dbfunc e rti_every_second _rti_every_second fV
--- 0107                   .dbsym s seconds L32 I
 4131            _rti_every_second::
 4131                    .dbline -1
 4131                    .dbline 72
 4131                    .dbline 76
 4131  16414F            jsr _collision_avoidance
 4134                    .dbline 79
 4134  FC1006            ldd L32
 4137  C30001            addd #1
 413A  CD0006            ldy #6
 413D  B7D6              exg x,y
 413F  1815              idivs
 4141  B7D6              exg x,y
 4143  7C1006            std L32
 4146                    .dbline 80
 4146  FC1006            ldd L32
 4149  2603              bne L33
 414B                    .dbline 80
 414B                    .dbline 81
 414B  16412A            jsr _trigger_collision
 414E                    .dbline 82
 414E            L33:
 414E                    .dbline -2
 414E                    .dbline 83
 414E            ;       
 414E            ;       // Simulate collisions at an interval
 414E            ;       seconds = (seconds + 1) % 6;
 414E            ;       if ( seconds == 0 ) {
 414E            ;               trigger_collision();
 414E            ;       }
 414E            ; }
 414E            L31:
 414E                    .dbline 0 ; func end
 414E  3D                rts
 414F                    .dbend
                        .area data
--- 0008                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
--- 0008           L36:
--- 0008                   .blkb 2
                        .area idata
--- 0008 0000              .word 0
                        .area data
--- 000A                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
--- 000A           L37:
--- 000A                   .blkb 2
                        .area idata
--- 000A 0000              .word 0
                        .area data
--- 000C                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
                        .area text
--- 0125                   .dbfile M:\SYSC20~2\Assignments\ASSIGN~3\PART4~1\assign44.c
--- 0125                   .dbfunc e collision_avoidance _collision_avoidance fV
--- 0125                   .dbsym s state L37 I
--- 0125                   .dbsym s seconds L36 I
--- 0125           ;          ?temp -> -4,x
--- 0125           ;          ?temp -> -2,x
 414F            _collision_avoidance::
 414F  34                pshx
 4150  B775              tfr s,x
 4152  1B9C              leas -4,sp
 4154                    .dbline -1
 4154                    .dbline 89
 4154            ; 
 4154            ; /*
 4154            ;       This is executes the algorithm provided in the labs to avoid a collision
 4154            ; */
 4154            ; void collision_avoidance()
 4154            ; {
 4154                    .dbline 98
 4154            ;       #define COLLISION_AVOID_STATE_INITIAL   0
 4154            ;       #define COLLISION_AVOID_STATE_WAIT              1
 4154            ;       #define COLLISION_AVOID_STATE_ROTATE90  2
 4154            ;       #define COLLISION_AVOID_STATE_CONTINUE  3
 4154            ; 
 4154            ;       static int seconds = 0;
 4154            ;       static int state = 0;
 4154            ;       
 4154            ;       if ( collision_detected ) {
 4154  FC1000            ldd _collision_detected
 4157  182700B2          lbeq L38
 415B                    .dbline 98
 415B                    .dbline 99
 415B  FC100A            ldd L37
 415E  2714              beq L42
 4160  FC100A            ldd L37
 4163  8C0001            cpd #1
 4166  2722              beq L44
 4168  FC100A            ldd L37
 416B  8C0002            cpd #2
 416E  2742              beq L48
 4170  1820007F          lbra L40
 4174            X0:
 4174                    .dbline 99
 4174            ;               switch ( state ) {
 4174            L42:
 4174                    .dbline 102
 4174            ;                       case COLLISION_AVOID_STATE_INITIAL:
 4174            ;                               // we would stop the forward motors here
 4174            ;                               printf("\n\nCollision warning!!\nStopping motors.\n");
 4174  CC42BA            ldd #L43
 4177  164732            jsr _printf
 417A                    .dbline 103
 417A            ;                               seconds = 0;
 417A  CC0000            ldd #0
 417D  7C1008            std L36
 4180                    .dbline 104
 4180            ;                               state = COLLISION_AVOID_STATE_WAIT;
 4180  CC0001            ldd #1
 4183  7C100A            std L37
 4186                    .dbline 105
 4186            ;                               break;
 4186  18200089          lbra L39
 418A            L44:
 418A                    .dbline 108
 418A            ;                       case COLLISION_AVOID_STATE_WAIT:
 418A            ;                               // wait 2 seconds before changing to next state (total time will be 3 second wait)
 418A            ;                               printf("Waiting for motors to be stopped\n");
 418A  CC4298            ldd #L45
 418D  164732            jsr _printf
 4190                    .dbline 109
 4190            ;                               if ( ++seconds >= 2 ) {
 4190  FC1008            ldd L36
 4193  C30001            addd #1
 4196  6C1E              std -2,x
 4198  18051E1008        movw -2,x,L36
 419D  EC1E              ldd -2,x
 419F  8C0002            cpd #2
 41A2  2D6F              blt L39
 41A4                    .dbline 109
 41A4                    .dbline 110
 41A4            ;                                       seconds = 0;
 41A4  CC0000            ldd #0
 41A7  7C1008            std L36
 41AA                    .dbline 111
 41AA            ;                                       state = COLLISION_AVOID_STATE_ROTATE90;
 41AA  CC0002            ldd #2
 41AD  7C100A            std L37
 41B0                    .dbline 112
 41B0            ;                               }
 41B0                    .dbline 113
 41B0            ;                               break;
 41B0  2061              bra L39
 41B2            L48:
 41B2                    .dbline 115
 41B2            ;                       case COLLISION_AVOID_STATE_ROTATE90:
 41B2            ;                               if ( seconds == 0 ) {
 41B2  FC1008            ldd L36
 41B5  260E              bne L49
 41B7                    .dbline 115
 41B7                    .dbline 116
 41B7            ;                                       printf("Rotating 90 degrees to the right.\n");
 41B7  CC4275            ldd #L51
 41BA  164732            jsr _printf
 41BD                    .dbline 117
 41BD            ;                                       stepper_turn_cw(STEPPER_STEPS_PER_QUARTER);
 41BD  CC0005            ldd #5
 41C0  16402A            jsr _stepper_turn_cw
 41C3                    .dbline 118
 41C3  2006              bra L50
 41C5            L49:
 41C5                    .dbline 118
 41C5            ;                               } else {
 41C5                    .dbline 119
 41C5            ;                                       printf("Waiting another second.\n");
 41C5  CC425C            ldd #L52
 41C8  164732            jsr _printf
 41CB                    .dbline 120
 41CB            ;                               }
 41CB            L50:
 41CB                    .dbline 122
 41CB            ;                               
 41CB            ;                               if ( ++seconds >= 2 ) {
 41CB  FC1008            ldd L36
 41CE  C30001            addd #1
 41D1  6C1C              std -4,x
 41D3  18051C1008        movw -4,x,L36
 41D8  EC1C              ldd -4,x
 41DA  8C0002            cpd #2
 41DD  2D34              blt L39
 41DF                    .dbline 122
 41DF                    .dbline 124
 41DF            ;                                       // Go back into initial state and reset collision detection
 41DF            ;                                       seconds = 0;
 41DF  CC0000            ldd #0
 41E2  7C1008            std L36
 41E5                    .dbline 125
 41E5            ;                                       state = COLLISION_AVOID_STATE_INITIAL;
 41E5  CC0000            ldd #0
 41E8  7C100A            std L37
 41EB                    .dbline 126
 41EB            ;                                       collision_detected = 0;
 41EB  CC0000            ldd #0
 41EE  7C1000            std _collision_detected
 41F1                    .dbline 129
 41F1            ;                                       
 41F1            ;                                       // We would start the forward motors here
 41F1            ;                               }
 41F1                    .dbline 130
 41F1            ;                               break;
 41F1  2020              bra L39
 41F3            L40:
 41F3                    .dbline 132
 41F3            ;                       default:
 41F3            ;                               printf("Unknown collision state, return to initial.\n");
 41F3  CC422F            ldd #L55
 41F6  164732            jsr _printf
 41F9                    .dbline 133
 41F9            ;                               seconds = 0;
 41F9  CC0000            ldd #0
 41FC  7C1008            std L36
 41FF                    .dbline 134
 41FF            ;                               state = COLLISION_AVOID_STATE_INITIAL;
 41FF  CC0000            ldd #0
 4202  7C100A            std L37
 4205                    .dbline 135
 4205            ;                               collision_detected = 0;
 4205  CC0000            ldd #0
 4208  7C1000            std _collision_detected
 420B                    .dbline 136
 420B            ;               }
 420B                    .dbline 137
 420B  2006              bra L39
 420D            L38:
 420D                    .dbline 137
 420D                    .dbline 138
 420D  CC4217            ldd #L56
 4210  164732            jsr _printf
 4213                    .dbline 139
 4213            L39:
 4213                    .dbline -2
 4213                    .dbline 140
 4213            ;       } else {
 4213            ;               printf("No collisions detected\n");
 4213            ;       }
 4213            ; }
 4213            L35:
 4213  B757              tfr x,s
 4215  30                pulx
 4216                    .dbline 0 ; func end
 4216  3D                rts
 4217                    .dbend
 4217            L56:
 4217  4E6F20636F6C6C6973696F6E73206465  .byte 'N,'o,32,'c,'o,'l,'l,'i,'s,'i,'o,'n,'s,32,'d,'e
 4227  7465637465640A00  .byte 't,'e,'c,'t,'e,'d,10,0
 422F            L55:
 422F  556E6B6E6F776E20636F6C6C6973696F  .byte 'U,'n,'k,'n,'o,'w,'n,32,'c,'o,'l,'l,'i,'s,'i,'o
 423F  6E2073746174652C2072657475726E20  .byte 'n,32,'s,'t,'a,'t,'e,44,32,'r,'e,'t,'u,'r,'n,32
 424F  746F20696E697469616C2E0A00        .byte 't,'o,32,'i,'n,'i,'t,'i,'a,'l,46,10,0
 425C            L52:
 425C  57616974696E6720616E6F7468657220  .byte 'W,'a,'i,'t,'i,'n,'g,32,'a,'n,'o,'t,'h,'e,'r,32
 426C  7365636F6E642E0A00        .byte 's,'e,'c,'o,'n,'d,46,10,0
 4275            L51:
 4275  526F746174696E672039302064656772  .byte 'R,'o,'t,'a,'t,'i,'n,'g,32,57,48,32,'d,'e,'g,'r
 4285  65657320746F20746865207269676874  .byte 'e,'e,'s,32,'t,'o,32,'t,'h,'e,32,'r,'i,'g,'h,'t
 4295  2E0A00            .byte 46,10,0
 4298            L45:
 4298  57616974696E6720666F72206D6F746F  .byte 'W,'a,'i,'t,'i,'n,'g,32,'f,'o,'r,32,'m,'o,'t,'o
 42A8  727320746F2062652073746F70706564  .byte 'r,'s,32,'t,'o,32,'b,'e,32,'s,'t,'o,'p,'p,'e,'d
 42B8  0A00              .byte 10,0
 42BA            L43:
 42BA  0A0A436F6C6C6973696F6E207761726E  .byte 10,10,'C,'o,'l,'l,'i,'s,'i,'o,'n,32,'w,'a,'r,'n
 42CA  696E6721210A53746F7070696E67206D  .byte 'i,'n,'g,33,33,10,'S,'t,'o,'p,'p,'i,'n,'g,32,'m
 42DA  6F746F72732E0A00  .byte 'o,'t,'o,'r,'s,46,10,0
